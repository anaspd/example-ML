# -*- coding: utf-8 -*-
"""example-ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uexnGGnSmeH-g-j0BrLLvl8ZrH6hiVPW
"""

pip install transformers datasets

from transformers import BertForQuestionAnswering, BertTokenizer, TrainingArguments, Trainer
import pandas as pd
import io
import requests
# Load the pre-trained model and tokenizer
model_name = 'bert-base-uncased'
model = BertForQuestionAnswering.from_pretrained(model_name)
tokenizer = BertTokenizer.from_pretrained(model_name)

# Prepare the dataset for training
url= ('https://www.cdc.gov/vaccines/hcp/acip-recs/vacc-specific/hpv.html')
s=requests.get(url).content
dataset = pd.read_csv(io.StringIO(s.decode('utf-8')))
train_dataset = dataset['train']
eval_dataset = dataset['eval']

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    evaluation_strategy='epoch',
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    weight_decay=0.01,
)

# Create a trainer and fine-tune the model
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    tokenizer=tokenizer,
)
trainer.train()

# Load the fine-tuned model and tokenizer
fine_tuned_model = BertForQuestionAnswering.from_pretrained('path/to/fine_tuned_model')
tokenizer = BertTokenizer.from_pretrained('path/to/fine_tuned_model')

# User input
question = "When did the GARDASIL 9 recommendations change?"

# Tokenize and encode the question
inputs = tokenizer.encode_plus(question, add_special_tokens=True, return_tensors='pt')

# Perform inference
answer_start_scores, answer_end_scores = fine_tuned_model(**inputs)
answer_start = torch.argmax(answer_start_scores)
answer_end = torch.argmax(answer_end_scores) + 1

# Decode and print the answer
answer = tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(inputs['input_ids'][0][answer_start:answer_end]))
print(f"Answer: {answer}")